import SimpleGUICS2Pygame.simpleguics2pygame as simplegui

# Globals

BLNK = 0  
WALL = 1
HOLD = 2
STON = 4
DUDE = 8
OVLP_DH = DUDE + HOLD
OVLP_SH = STON + HOLD

UP = 0
LEFT = 1
DOWN = 2
RIGHT = 3

# For Sound:
sound1=simplegui.load_sound('https://commondatastorage.googleapis.com/codeskulptor-assets/Collision8-Bit.ogg')
sound2=simplegui.load_sound('https://commondatastorage.googleapis.com/codeskulptor-assets/jump.ogg')

# Grid (10x15 grid renders the game on screen)
grid = [[0 for x in range(15)] for x in range(10)]
dude_pos = [-1, -1]
cur_level = 0
level_complete = False
game_started = False
moves = []
move_count = 0
solution_mode = False
soln_index = -1

# Helper Functions

def load_map(level):
    global grid, dude_pos, move_count
    level_grid = levels[level]
    move_count = 0
    for i in range(10):
        for j in range(15):
            grid[i][j] = int(level_grid[i][j])
            # determine the initial position of the dude
            if (grid[i][j] == DUDE):
                dude_pos = [i, j]
    
# Return True, if the move resulted in a change, else False    
def move_dude(direction):
    global grid, dude_pos, cur_level, level_complete, move_count,solution_mode
    [i, j] = [dude_pos[0] + direction[0], dude_pos[1] + direction[1]]
    if (grid[i][j] == WALL):
        #nothing to do - hit the wall
        return False
    elif (grid[i][j] == BLNK or grid[i][j] == HOLD):
        #advance the dude
        grid[i][j] += DUDE
        grid[dude_pos[0]][dude_pos[1]] -= DUDE # handles overlap as well
        dude_pos = [i, j]
        sound1.play()
    elif (grid[i][j] == STON or grid[i][j] == STON+HOLD):
        #check if the stone can move
        if (not move_stone([i, j], direction)):
            #nothing to do - cant move stone
            return False
        else:
            grid[i][j] += DUDE
            grid[dude_pos[0]][dude_pos[1]] -= DUDE # handles overlap as well
            dude_pos = [i, j]
            sound1.play()
    # Keep it simple - at the end of every move check if all gems are in gem-holders
    level_in_progress = False
    for i in range(10):
        for j in range(15):
            if (grid[i][j] == STON):
                level_in_progress = True
    if (not level_in_progress):
        # We support only 5 levels at this point in time
        if (cur_level != 4):
            cur_level += 1
        # Draw the level complete screen
        level_complete = True
        sound2.play()
    move_count += 1
    return True

def move_stone(position, direction):
    global grid
    [i, j] = [position[0] + direction[0], position[1] + direction[1]]
    if (grid[i][j] == WALL or grid[i][j] == STON or grid[i][j] == STON+HOLD):
        #move not possible
        return False
    else:
        #advance the stone
        grid[i][j] += STON
        grid[position[0]][position[1]] -= STON # handles overlap
        sound1.play()
        return True
        
# Handlers
def draw_game(canvas):
    # Intial splash screen
    if (not game_started):
        canvas.draw_text ("Hit the Spacebar to continue...", [150,150], 20, "Cyan", "sans-serif")
        return
    for i in range(10):
        for j in range(15):
            image_load_offset = [j*40+60, i*40+60]
            # Overlap scenarios
            if (grid[i][j] == OVLP_DH):
                canvas.draw_image (tex_holder, [25, 25], [50, 50], image_load_offset, [40, 40])
                canvas.draw_image (tex_sokoban, [25, 25], [50, 50], image_load_offset, [40, 40])
            elif (grid[i][j] == OVLP_SH):
                canvas.draw_image (tex_holder, [25, 25], [50, 50], image_load_offset, [40, 40])
                canvas.draw_image (tex_gem, [25, 25], [50, 50], image_load_offset, [40, 40])
            else:
                image = tex_map.get(grid[i][j])
                canvas.draw_image (image, [25, 25], [50, 50], image_load_offset, [40, 40])
    canvas.draw_text ("Moves: " + str(move_count), [600, 465], 12, "White", "sans-serif")
    canvas.draw_text ("Level: " + str(cur_level+1), [610, 25], 12, "White", "sans-serif")
    if (solution_mode):
        canvas.draw_text ("[ Solution Mode ]", [25, 25], 12, "Yellow", "sans-serif")
        canvas.draw_text ("Hit any key to advance the solution...", [15,465], 12, "Cyan", "sans-serif")
    # If Level complete - display splash-screen on the grid
    if (level_complete):
#         sound2.play()
        canvas.draw_image (level_complete_screen, [225, 75], [450,150], [340, 240], [450, 150])
        canvas.draw_text ("Hit the Spacebar to continue...", [15,465], 12, "Cyan", "sans-serif")
         
def restart_button_handler():
    global moves, solution_mode
    if (solution_mode):
        solution_mode = False
    load_map(cur_level)
    moves = []

key_action = {UP:[-1,0], DOWN:[1,0], LEFT:[0,-1], RIGHT:[0,1]}
  
def undo_button_handler():
    global moves, move_count
    if (solution_mode or level_complete):
        return
    if not len(moves):
        return
    load_map(cur_level)
    moves.pop()
    for move in moves:
        move_dude(key_action[move])

def solve_button_handler():
    global solution_mode, soln_index
    if (level_complete):
        return
    load_map(cur_level)
    soln_index = 0
    solution_mode = True

soln_key_map = {'T':[-1,0], 'D':[1,0], 'L':[0,-1], 'R':[0,1]}    
    
def keydown_handler(key):
    global level_complete, cur_level, game_started, moves, move_count, soln_index, solution_mode
    
    # In solution mode, hitting any key advances the solution
    if (solution_mode):
        move_dude(soln_key_map[solutions[cur_level][soln_index]])
        if (level_complete):
            solution_mode = False
        soln_index += 1
        return
        
    if (key == simplegui.KEY_MAP['up']):
        if (move_dude([-1, 0])):
            moves.append(UP)
    elif (key == simplegui.KEY_MAP['down']):
        if (move_dude([1, 0])):
            moves.append(DOWN)
    elif (key == simplegui.KEY_MAP['left']):
        if (move_dude([0, -1])):
            moves.append(LEFT)
    elif (key == simplegui.KEY_MAP['right']):
        if (move_dude([0, 1])):
            moves.append(RIGHT)
    elif (key == simplegui.KEY_MAP['space']):
        if (level_complete):
            level_complete = False
            load_map (cur_level)
            moves = []
            move_count = 0
        elif (not game_started):
            game_started = True
            load_map (cur_level)

# Hardcoding the 5 levels of the game in code as file-support is not available
levels = [["000000100000000",
           "000111100100000",
           "000122100100000",
           "000102111100000",
           "000100180100000",
           "000140140100000",
           "000100400110000",
           "000110000010000",
           "000011111110000",
           "000000000000000"]
          ,
          ["000000000000000",
           "000011111000000",
           "000110001110000",
           "000102220010000",
           "000101010010000",
           "000104440110000",
           "000110800100000",
           "000011111100000",
           "000000000000000",
           "000000000000000"]
          ,
          ["000000000000000",
           "000000111110000",
           "000111100010000",
           "000100104010000",
           "000180222110000",
           "000100210010000",
           "000104044010000",
           "000111100010000",
           "000000111110000",
           "000000000000000"]
          ,
          ["000111011111000",
           "000110110201000",
           "000101104201000",
           "000011040001000",
           "000110480111000",
           "000104001100000",
           "000122011011000",
           "000100010110000",
           "000111110100000",
           "000000000000000"]
          ,
          ["111111111111000",
           "122001000001110",
           "122001040040010",
           "122001411110010",
           "122000080110010",
           "122001010040110",
           "111111011404010",
           "001040040404010",
           "001000010000010",
           "001111111111110"]
         ]

solutions = ["RDDLLDLTTTTDDDLTTTDDDRRRRTTLDRDLLDLTTT",
             "TTDDRRTTTLTLLDLDDRDRRRTTTLLRRDDDLLTTDRDRTTRTL",
             "RRRTTRRDLTLDRDLLRRDRDDLTTTLTTRRDLDLLDDRDRRTTLTTTLDRDLRDRDDLTTTLTTRRDLTLDRDDDLLTLLDRRRDRTTDLLLLTTTRDLDR",
             "RTRTTLDLDLDLDLDDRRTLTTRDTTRRLLDDRTLTRDRTLTLTRTRRDDLTLLDDRTLTRDDLLLDDDRTLTTRRDLTLD",
             "RDRRDDDRRTTLTTRTTLLTLLLLDDTTRRRRDRRDDLDLLLTLLLLDLTTTRTLLRRDDDRRTTTRRDLTLDDTTRRRRDRRDDLDLLLTLLLLDLTTTRTLRDDDRRTTTRRRRDLLLTLDDTRRRRRRDDLDLLLTLLLLDLTTRTLLDDRRRRRRDRRRTTRTLLLLLTLDDTRRRRRDDDLLLTLLLLLDLTTDRRRRRRDRRRDRDDLTTTTTRTLLLLLTLDDTRRRRRDDDLLLTLLLLDLTRTLLDRRRRRRDRRRDDDLLLTRRDRTTTTTRTLLLLLTLDDTRRRRRDDDLLLTLLLLLDLTTRRRRRRDRDRDRTTTTRTLLLLLTLDDTRRRRRDDDLLLTLLLLLLRRRRRRDRRDDDLLTRRDRTTTTTRTLLLLLTLDDTRRRRRDDDLLLTLLLLLRRRDDDRRRRDRTTTTTRTLLLLLTLDDTRRRRRDDDLLLTLLLLTLDRDLLRRTRRDDDDLLLTRRDRTTTDDRRRTTLTLLLLTLDRDL"
            ]

# Create Frame
sokobanFrame = simplegui.create_frame("Sokoban", 680, 480)
sokobanFrame.add_button("Restart", restart_button_handler, 150)
sokobanFrame.add_button("Undo", undo_button_handler, 150)
sokobanFrame.add_button("Solve", solve_button_handler, 150)

# Register handlers
sokobanFrame.set_draw_handler(draw_game)
sokobanFrame.set_keydown_handler(keydown_handler)

# Images:-
tex_blank = simplegui.load_image ("https://docs.google.com/uc?export=download&id=0BzY_KM7HLvAMNjljeXJiNHM1Wmc")
tex_gem = simplegui.load_image ("https://docs.google.com/uc?export=download&id=0BzY_KM7HLvAMRXctbXZDRU9JcHc")
tex_sokoban = simplegui.load_image ("https://docs.google.com/uc?export=download&id=0BzY_KM7HLvAMS1pOcm9pNVBBUWM")
tex_wall = simplegui.load_image ("https://docs.google.com/uc?export=download&id=0BzY_KM7HLvAMd3RpSE1LTW5xOW8")
tex_holder = simplegui.load_image ("https://docs.google.com/uc?export=download&id=0BzY_KM7HLvAMeVlHaEtBbVQ1NmM")
level_complete_screen = simplegui.load_image("https://dl.dropboxusercontent.com/s/lwwgxp6iqahuk9e/sokay.gif?dl=1&token_hash=AAEgRcdHl_HqLDDprAf4A4UzGkGiBPIZWaAmW6hKFem9Ug")

#Create a texture_map
tex_map = {BLNK:tex_blank, STON:tex_gem, DUDE:tex_sokoban, WALL:tex_wall, HOLD:tex_holder}
# Start the Frame
sokobanFrame.start()
